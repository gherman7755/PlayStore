{"ast":null,"code":"import { loginFailure, loginStart, loginSuccess, logoutFailure, logoutStart, logoutSuccess } from \"./userSlice\";\nimport { publicRequest, userRequest } from \"../requestsMethods\";\nimport { addGameStart, addGameSuccess, addGameFailure, getGameStart, getGameFailure, getGameSuccess } from \"../redux/gameRedux\";\nimport { addUserFailure, addUserStart, addUserSuccess } from \"./registerUserRedux\";\nexport const login = async (dispatch, user) => {\n  dispatch(loginStart());\n\n  try {\n    const res = await publicRequest.post(\"/auth/login\", user);\n    dispatch(loginSuccess(res.data));\n  } catch (err) {\n    dispatch(loginFailure());\n  }\n}; // export const logout = async (dispatch, user) => {\n//     dispatch(logoutStart());\n//     try{\n//         const res = await userRequest.get(\"/auth/logout\")\n//         dispatch(logoutSuccess())\n//     } catch (err){\n//         dispatch(logoutFailure())\n//     }\n// }\n\nexport const create = async (dispatch, game) => {\n  // console.log(game)\n  dispatch(addGameStart());\n\n  try {\n    const res = await userRequest.post(\"/games/\", game);\n    dispatch(addGameSuccess(res.data));\n  } catch (err) {\n    dispatch(addGameFailure());\n  }\n};\nexport const getGames = async dispatch => {\n  dispatch(getGameStart());\n\n  try {\n    const res = await publicRequest.get(\"/games\");\n    dispatch(getGameSuccess(res.data));\n  } catch (err) {\n    dispatch(getGameFailure());\n  }\n};\nexport const register = async (dispatch, user) => {\n  dispatch(addUserStart());\n\n  try {\n    const res = await publicRequest.post(\"/auth/register\", user);\n    dispatch(addUserSuccess(res.data));\n  } catch (err) {\n    dispatch(addUserFailure());\n  }\n};","map":{"version":3,"names":["loginFailure","loginStart","loginSuccess","logoutFailure","logoutStart","logoutSuccess","publicRequest","userRequest","addGameStart","addGameSuccess","addGameFailure","getGameStart","getGameFailure","getGameSuccess","addUserFailure","addUserStart","addUserSuccess","login","dispatch","user","res","post","data","err","create","game","getGames","get","register"],"sources":["C:/Users/Legion/Desktop/Play Store/storefront/src/redux/apiCalls.js"],"sourcesContent":["import { loginFailure, loginStart, loginSuccess, logoutFailure, logoutStart, logoutSuccess } from \"./userSlice\";\r\nimport { publicRequest, userRequest } from \"../requestsMethods\"\r\nimport {addGameStart, addGameSuccess, addGameFailure, getGameStart, getGameFailure, getGameSuccess} from \"../redux/gameRedux\"\r\nimport {addUserFailure, addUserStart, addUserSuccess} from \"./registerUserRedux\"\r\n\r\nexport const login = async (dispatch, user) => {\r\n    dispatch(loginStart());\r\n    try{\r\n        const res = await publicRequest.post(\"/auth/login\", user)\r\n        dispatch(loginSuccess(res.data))\r\n    }catch(err){\r\n        dispatch(loginFailure())\r\n    }\r\n}\r\n\r\n// export const logout = async (dispatch, user) => {\r\n//     dispatch(logoutStart());\r\n//     try{\r\n//         const res = await userRequest.get(\"/auth/logout\")\r\n//         dispatch(logoutSuccess())\r\n//     } catch (err){\r\n//         dispatch(logoutFailure())\r\n//     }\r\n// }\r\n\r\nexport const create = async (dispatch, game) => {\r\n    // console.log(game)\r\n    dispatch(addGameStart());\r\n    try{\r\n        const res = await userRequest.post(\"/games/\", game)\r\n        dispatch(addGameSuccess(res.data))\r\n    } catch(err){\r\n        dispatch(addGameFailure());\r\n    }\r\n}\r\n\r\n\r\nexport const getGames = async (dispatch) => {\r\n    dispatch(getGameStart());\r\n    try{\r\n        const res = await publicRequest.get(\"/games\");\r\n        dispatch(getGameSuccess(res.data))\r\n    } catch(err){\r\n        dispatch(getGameFailure());\r\n    }\r\n}\r\n\r\nexport const register = async(dispatch, user) => {\r\n    dispatch(addUserStart());\r\n    try{\r\n        const res = await publicRequest.post(\"/auth/register\", user)\r\n        dispatch(addUserSuccess(res.data))\r\n    } catch (err){\r\n        dispatch(addUserFailure());\r\n    }\r\n}"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,UAAvB,EAAmCC,YAAnC,EAAiDC,aAAjD,EAAgEC,WAAhE,EAA6EC,aAA7E,QAAkG,aAAlG;AACA,SAASC,aAAT,EAAwBC,WAAxB,QAA2C,oBAA3C;AACA,SAAQC,YAAR,EAAsBC,cAAtB,EAAsCC,cAAtC,EAAsDC,YAAtD,EAAoEC,cAApE,EAAoFC,cAApF,QAAyG,oBAAzG;AACA,SAAQC,cAAR,EAAwBC,YAAxB,EAAsCC,cAAtC,QAA2D,qBAA3D;AAEA,OAAO,MAAMC,KAAK,GAAG,OAAOC,QAAP,EAAiBC,IAAjB,KAA0B;EAC3CD,QAAQ,CAACjB,UAAU,EAAX,CAAR;;EACA,IAAG;IACC,MAAMmB,GAAG,GAAG,MAAMd,aAAa,CAACe,IAAd,CAAmB,aAAnB,EAAkCF,IAAlC,CAAlB;IACAD,QAAQ,CAAChB,YAAY,CAACkB,GAAG,CAACE,IAAL,CAAb,CAAR;EACH,CAHD,CAGC,OAAMC,GAAN,EAAU;IACPL,QAAQ,CAAClB,YAAY,EAAb,CAAR;EACH;AACJ,CARM,C,CAUP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMwB,MAAM,GAAG,OAAON,QAAP,EAAiBO,IAAjB,KAA0B;EAC5C;EACAP,QAAQ,CAACV,YAAY,EAAb,CAAR;;EACA,IAAG;IACC,MAAMY,GAAG,GAAG,MAAMb,WAAW,CAACc,IAAZ,CAAiB,SAAjB,EAA4BI,IAA5B,CAAlB;IACAP,QAAQ,CAACT,cAAc,CAACW,GAAG,CAACE,IAAL,CAAf,CAAR;EACH,CAHD,CAGE,OAAMC,GAAN,EAAU;IACRL,QAAQ,CAACR,cAAc,EAAf,CAAR;EACH;AACJ,CATM;AAYP,OAAO,MAAMgB,QAAQ,GAAG,MAAOR,QAAP,IAAoB;EACxCA,QAAQ,CAACP,YAAY,EAAb,CAAR;;EACA,IAAG;IACC,MAAMS,GAAG,GAAG,MAAMd,aAAa,CAACqB,GAAd,CAAkB,QAAlB,CAAlB;IACAT,QAAQ,CAACL,cAAc,CAACO,GAAG,CAACE,IAAL,CAAf,CAAR;EACH,CAHD,CAGE,OAAMC,GAAN,EAAU;IACRL,QAAQ,CAACN,cAAc,EAAf,CAAR;EACH;AACJ,CARM;AAUP,OAAO,MAAMgB,QAAQ,GAAG,OAAMV,QAAN,EAAgBC,IAAhB,KAAyB;EAC7CD,QAAQ,CAACH,YAAY,EAAb,CAAR;;EACA,IAAG;IACC,MAAMK,GAAG,GAAG,MAAMd,aAAa,CAACe,IAAd,CAAmB,gBAAnB,EAAqCF,IAArC,CAAlB;IACAD,QAAQ,CAACF,cAAc,CAACI,GAAG,CAACE,IAAL,CAAf,CAAR;EACH,CAHD,CAGE,OAAOC,GAAP,EAAW;IACTL,QAAQ,CAACJ,cAAc,EAAf,CAAR;EACH;AACJ,CARM"},"metadata":{},"sourceType":"module"}